#ifndef _GPIO_API_H
#define _GPIO_API_H
/**************************************************************************************************/
/*
 *                      Eaton Electrical
 *
 *                      Proprietary Information
 *                      (C) Copyright 2020
 *                      All rights reserved
 *
 **************************************************************************************************
 *  Written by:         Hank Sun
 *                      Eaton Electrical
 *                      1000 Cherrington Parkway
 *                      Pittsburgh, PA  15108-4312
 *                      (412) 893-3300
 *//**
 * @brief External interface for the GPIO component.
 *
 * @file gpio_api.h
 * @ingroup gpio
 *
 *//*
 *
 **************************************************************************************************/
#include "stm32g071xx.h"
#include "types.h"

// Undefine existing symbols
#undef GPIO_PIN_RESET
#undef GPIO_PIN_SET
#undef GPIO_PIN_STATE_UNKNOWN

// Redefine symbols with new values
//#define GPIO_PIN_RESET 0UL
//#define GPIO_PIN_SET 1UL
//#define GPIO_PIN_STATE_UNKNOWN 255UL

/**
 * @brief GPIO bit set and reset type define.
 */
typedef enum
{
    GPIO_PIN_RESET = 0UL,
    GPIO_PIN_SET = 1UL,
    GPIO_PIN_STATE_UNKNOWN = 255UL
} gpio_pin_state_t;

 /*************************************************************************************************/
 /**
  * @brief Initialize pins
  *
  * This function initializes specific pins as follows. (Code generated by STMcube)
  *  - Analog
  *  - Input
  *  - Output
  *  - EVENT_OUT
  *  - EXTI
  *    Free pins are configured automatically as Analog (this feature is enabled through
  *    the Code Generation settings)
  *
  * @return none
  *
  * @exception none
  *
  * @requirement{2009021300}
  *
  *************************************************************************************************/
void gpio_init_component(void);


#if BOARD_CONFIGURATION == BOARD_SB2
/**************************************************************************************************/
/**
 * @brief reconfigures the startup cap to be an output pin.
 *
 * @param[in]  void
 *
 * @return none
 *
 **************************************************************************************************/
void reconfigure_cap_config_output(void);
#endif

/**************************************************************************************************/
/**
 * @brief Sets an output pin.
 *
 * @param[in]  GPIOx - GPIO port containing desired pin.
 * @param[in]  pin_mask - Pin to write.
 *
 * @return none
 *
 * @test LL_GPIO_SetOutputPin should expect GPIOx and pin_mask parameters.
 *
 * @exception GPIO component is not initialized
 *
 * @requirement{2009021301}
 *
 **************************************************************************************************/
void gpio_set_output_pin(GPIO_TypeDef *GPIOx, u32 pin_mask);

/**************************************************************************************************/
/**
 * @brief Resets specified output pin.
 *
 * output a 0 on specified pin
 *
 * @param[in]  GPIOx - GPIO port for desired pin.
 * @param[in]  pin_mask - Pin on which to output 0.
 *
 * @return none
 *
 * @test LL_GPIO_ResetOutputPin should expect GPIOx and pin_mask parameters.
 *
 * @exception GPIO component is not initialized
 *
 * @requirement{2009021301}
 *
 **************************************************************************************************/
void gpio_reset_output_pin(GPIO_TypeDef *GPIOx, u32 pin_mask);


/**************************************************************************************************/
/**
 * @brief Read specified input pin.
 *
 * @param[in]  GPIOx - GPIO port that contains pin to be read
 * @param[in]  pin_mask - Pin to read.
 *
 * @return GPIO_PIN_SET if pin is set, GPIO_PIN_RESET if pin is reset.
 *
 * @test LL_GPIO_IsInputPinSet(GPIOx, pin_mask) will return if the pin is set or reset. If set,
 *       return GPIO_PIN_SET, else return GPIO_PIN_RESET.
 *
 * @exception GPIO component is not initialized
 *
 * @requirement{2009021302}
 *
 **************************************************************************************************/
gpio_pin_state_t gpio_read_input_pin(GPIO_TypeDef *GPIOx, u32 pin_mask);

/**************************************************************************************************/
/**
 * @brief Toggles an output pin.
 *
 * @param[in]  GPIOx - GPIO port containing desired pin
 * @param[in]  pin_mask - Pin to toggle.
 *
 * @return none
 *
 * @test LL_GPIO_TogglePin should expect GPIOx and pin_mask parameters.
 *
 * @exception GPIO component is not initialized
 *
 * @requirement{2009021303}
 *
 **************************************************************************************************/
void gpio_toggle_output_pin(GPIO_TypeDef *GPIOx, u32 pin_mask);

#endif /*_GPIO_API_H */

